<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python</title>
      <link href="/posts/a4d4b8b8.html"/>
      <url>/posts/a4d4b8b8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自主学习</p><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#2.用法: print(name , age, gender) </span><br><span class="line">age &#x3D;18</span><br><span class="line">gender &#x3D;&#39; boy &#39;</span><br><span class="line">print ( name , age，gender) # sep默认的分割是空格</span><br><span class="line"># 3.用法: print(value ,value, value,... ,sep&#x3D;&#39; &#39;，end&#x3D;&#39;\n &#39;)</span><br><span class="line">print (name , age, gender ,sep&#x3D;&#39;-&#39;) # sep&#x3D;6*3</span><br><span class="line">sep&#x3D;&#39; $&#39; sep&#x3D;&#39; -</span><br><span class="line">#转义字符:\n换行</span><br><span class="line">print( &#39;hello\nkitty&#39;)</span><br><span class="line">print(&#39; AAA&#39; ,end&#x3D;&#39;&#39; )</span><br><span class="line">#&#39;AAA\n&#39;---&gt;&#39;AAA&#39;</span><br><span class="line">print( &#39; BBB&#39; , end&#x3D; )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="https://cdn.jsdelivr.net/gh/foxscallion11/source/imgs/63964404cc7a80c3.png" alt=""><br><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="https://cdn.jsdelivr.net/gh/foxscallion11/source/imgs/84ab7528a5ac74d.png" alt=""><br><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="https://i.niupic.com/images/2020/07/29/8sX4.png" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo-Termux】之手机神器编写博客无须电脑操</title>
      <link href="/posts/d1bdbb0.html"/>
      <url>/posts/d1bdbb0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="我发现了一个手机📱神器，基于安卓系统的Linux，可以完美运行Linux，phtyon，kali，网络黑客操作工具，tomcat，SSH，远程阿里云服务器，更更重要的是可以用📱编写hexo博客，再也不用电脑来操作了，出门在外，都可以随时随地的编写博客，想想都舒服😊"><a href="#我发现了一个手机📱神器，基于安卓系统的Linux，可以完美运行Linux，phtyon，kali，网络黑客操作工具，tomcat，SSH，远程阿里云服务器，更更重要的是可以用📱编写hexo博客，再也不用电脑来操作了，出门在外，都可以随时随地的编写博客，想想都舒服😊" class="headerlink" title="我发现了一个手机📱神器，基于安卓系统的Linux，可以完美运行Linux，phtyon，kali，网络黑客操作工具，tomcat，SSH，远程阿里云服务器，更更重要的是可以用📱编写hexo博客，再也不用电脑来操作了，出门在外，都可以随时随地的编写博客，想想都舒服😊"></a>我发现了一个手机📱神器，基于安卓系统的Linux，可以完美运行Linux，phtyon，kali，网络黑客操作工具，tomcat，SSH，远程阿里云服务器，更更重要的是可以用📱编写hexo博客，再也不用电脑来操作了，出门在外，都可以随时随地的编写博客，想想都舒服😊</h3><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><p>Termux 是一个 Android 下一个高级的终端模拟器,开源且不需要 root，支持 apt 管理软件包，十分方便安装软件包，完美支持 Python、 PHP、 Ruby、 Nodejs、 MySQL等。随着智能设备的普及和性能的不断提升，如今的手机、平板等的硬件标准已达到了初级桌面计算机的硬件标准，用心去打造 DIY 的话完全可以把手机变成一个强大的极客工具。</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>Ctrl + A -&gt; 将光标移动到行首<br>Ctrl + C -&gt; 中止当前进程<br>Ctrl + D -&gt; 注销终端会话<br>Ctrl + E -&gt; 将光标移动到行尾<br>Ctrl + K -&gt; 从光标删除到行尾<br>Ctrl + U -&gt; 从光标删除到行首<br>Ctrl + L -&gt; 清除终端<br>Ctrl + Z -&gt; 挂起（发送SIGTSTP到）当前进程</p><h2 id="下载termux"><a href="#下载termux" class="headerlink" title="下载termux"></a>下载termux</h2></li><li><p>先下载F-Driod,在里面下载termux</p></li><li><p>个人建议不要浏览器下载，很多盗版，只有十几kb，而且还会报错 unable install</p></li><li><p>FDriod就可以了，谷歌 play也不行</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2></li><li><p>通过双手来放大缩小字体大小</p></li><li><p>长按屏幕可以复制粘贴</p><h2 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h2></li><li><p>屏幕左滑可以管理会话，控制按钮显示</p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pkg search &lt;query&gt;              # 搜索包</span><br><span class="line">pkg install &lt;package&gt;           # 安装包</span><br><span class="line">pkg uninstall &lt;package&gt;         # 卸载包</span><br><span class="line">pkg reinstall &lt;package&gt;         # 重新安装包</span><br><span class="line">pkg update                      # 更新源</span><br><span class="line">pkg upgrade                     # 升级软件包</span><br><span class="line">pkg list-all                    # 列出可供安装的所有包</span><br><span class="line">pkg list-installed              # 列出已经安装的包</span><br><span class="line">pkg show &lt;package&gt;              # 显示某个包的详细信息</span><br><span class="line">pkg files &lt;package&gt;             # 显示某个包的相关文件夹路径</span><br></pre></td></tr></table></figure><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i .&#x2F;package.de         # 安装 deb 包</span><br><span class="line">dpkg --remove [package name] # 卸载软件包</span><br><span class="line">dpkg -l                      # 查看已安装的包</span><br><span class="line">man dpkg                     # 查看详细文档</span><br></pre></td></tr></table></figure><h2 id="查看目录"><a href="#查看目录" class="headerlink" title="查看目录"></a>查看目录</h2></li><li><p>命令<code>pwd</code> </p></li><li><p>cd ..回到上一级目录</p><h2 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h2></li><li><p>Android 10 以下版本</p></li><li><p>Andorid 10 以下的版本是可以正常使用netstat 命令的，这样可以方便的查看端口开放信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看所有端口</span><br><span class="line">netstat -an</span><br><span class="line"></span><br><span class="line"># 查看3306端口的开放情况</span><br><span class="line">netstat -an|grep 3306</span><br></pre></td></tr></table></figure></li><li><p>Android 10 版本</p></li><li><p>Andorid 10 版本的Termux 下无法正常使用 netstat -an 命令，国光的解决方法是安装一个 nmap，然后扫描本地端口（弯道超车）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 安装nmap端口扫描神器</span><br><span class="line">pkg install nmap</span><br><span class="line"></span><br><span class="line"># 扫描本地端口</span><br><span class="line">nmap 127.0.0.1</span><br></pre></td></tr></table></figure><h2 id="换国内源"><a href="#换国内源" class="headerlink" title="换国内源"></a>换国内源</h2></li><li><p>更新 <code>pkg update</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#39;s@^\(deb.*stable main\)$@#\1\ndeb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;termux&#x2F;termux-packages-24 stable main@&#39; $PREFIX&#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line"></span><br><span class="line">sed -i &#39;s@^\(deb.*games stable\)$@#\1\ndeb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;termux&#x2F;game-packages-24 games stable@&#39; $PREFIX&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;game.list</span><br><span class="line"></span><br><span class="line">sed -i &#39;s@^\(deb.*science stable\)$@#\1\ndeb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;termux&#x2F;science-packages-24 science stable@&#39; $PREFIX&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;science.list</span><br><span class="line"></span><br><span class="line">pkg update</span><br></pre></td></tr></table></figure><h2 id="换国内源-1"><a href="#换国内源-1" class="headerlink" title="换国内源"></a>换国内源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#39;s@^\(deb.*stable main\)$@#\1\ndeb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;termux&#x2F;termux-packages-24 stable main@&#39; $PREFIX&#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line"></span><br><span class="line">sed -i &#39;s@^\(deb.*games stable\)$@#\1\ndeb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;termux&#x2F;game-packages-24 games stable@&#39; $PREFIX&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;game.list</span><br><span class="line"></span><br><span class="line">sed -i &#39;s@^\(deb.*science stable\)$@#\1\ndeb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;termux&#x2F;science-packages-24 science stable@&#39; $PREFIX&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;science.list</span><br><span class="line"></span><br><span class="line">pkg update</span><br></pre></td></tr></table></figure><h2 id="配色方案"><a href="#配色方案" class="headerlink" title="配色方案"></a>配色方案</h2></li><li><p>国外地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;github.com&#x2F;Cabbagec&#x2F;termux-ohmyzsh&#x2F;raw&#x2F;master&#x2F;install.sh)&quot;</span><br></pre></td></tr></table></figure></li><li><p>国内地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;html.sqlsec.com&#x2F;termux-install.sh)&quot;</span><br></pre></td></tr></table></figure><h2 id="安装termux-style"><a href="#安装termux-style" class="headerlink" title="安装termux:style"></a>安装termux:style</h2></li><li><p>可以轻松修改终端样式</p></li><li><p>手🈯长按终端，点击more→style</p></li><li><p>👈🏻修改终端颜色 ，👉🏻修改终端字体</p><h2 id="创建软链接"><a href="#创建软链接" class="headerlink" title="创建软链接"></a>创建软链接</h2></li><li><p>执行过上面的一键配置脚本后，并且授予 Termux 文件访问权限的话，会在家目录生成storage目录，并且生成若干目录，软连接都指向外置存储卡的相应目录:</p></li><li><p>QQ</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#x2F;data&#x2F;data&#x2F;com.termux&#x2F;files&#x2F;home&#x2F;storage&#x2F;shared&#x2F;tencent&#x2F;QQfile_recv QQ</span><br></pre></td></tr></table></figure><h2 id="获取root权限"><a href="#获取root权限" class="headerlink" title="获取root权限"></a>获取root权限</h2></li><li><p>📱🈚root权限</p></li><li><p>利用proot可以为手机没有root的用户来模拟一个root的环境，这里主要是经典的 Linux 文件系统布局上的模拟。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkg install proot -y</span><br><span class="line">termux-chroot</span><br></pre></td></tr></table></figure></li><li><p>输入<code>exit</code>可回到普通用户的文件系统</p><h2 id="手机已经root"><a href="#手机已经root" class="headerlink" title="手机已经root"></a>手机已经root</h2></li><li><p>安装tsu，这是一个su的 Termux 版本，是一个真正的root权限，用来在termux上替代su，操作不慎可能对手机有安全风险。因为官方封装了，所以安装也很简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkg install tsu -y</span><br><span class="line">tsu</span><br></pre></td></tr></table></figure></li><li><p>即可切换root用户，这个时候会弹出root授权提示，给予其root</p><h2 id="修改自定义按钮"><a href="#修改自定义按钮" class="headerlink" title="修改自定义按钮"></a>修改自定义按钮</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 新建并编辑配置文件</span><br><span class="line">vim ~&#x2F;.termux&#x2F;termux.properties</span><br></pre></td></tr></table></figure></li><li><p>内容是，🉑根据需求修改值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">extra-keys &#x3D; [ \</span><br><span class="line"> [&#39;ESC&#39;,&#39;|&#39;,&#39;&#x2F;&#39;,&#39;HOME&#39;,&#39;UP&#39;,&#39;END&#39;,&#39;PGUP&#39;,&#39;DEL&#39;], \</span><br><span class="line">  [&#39;TAB&#39;,&#39;CTRL&#39;,&#39;ALT&#39;,&#39;LEFT&#39;,&#39;DOWN&#39;,&#39;RIGHT&#39;,&#39;PGDN&#39;,&#39;BKSP&#39;] \</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><h2 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h2></li><li><p>Vim 被称为编辑器之神，基本上 Linux 发行版都会自带 Vim，这个在前文基本工具已经安装了，如果你没有安装的话，可以使用如下命令安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install vim</span><br></pre></td></tr></table></figure><h2 id="解决汉字乱码"><a href="#解决汉字乱码" class="headerlink" title="解决汉字乱码"></a>解决汉字乱码</h2></li><li><p>如果你的Vim打开汉字出现乱码的话，那么在家目录(~)下,新建.vimrc文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .vimrc</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set fileencodings&#x3D;utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1</span><br><span class="line">set enc&#x3D;utf8</span><br><span class="line">set fencs&#x3D;utf8,gbk,gb2312,gb18030</span><br></pre></td></tr></table></figure></li><li><p>后source下变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .vimrc</span><br></pre></td></tr></table></figure><h2 id="安装Apache"><a href="#安装Apache" class="headerlink" title="安装Apache"></a>安装Apache</h2></li><li><p>Apache是一个开源网页服务器软件，由于其跨平台和安全性，被广泛使用，是最流行的Web服务器软件之一。</p></li><li><p>安装 Apache</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install apache2</span><br></pre></td></tr></table></figure></li><li><p>启用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apachectl start</span><br></pre></td></tr></table></figure></li><li><p>后浏览器访问: <a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a> 访问是否成功启动</p></li><li><p>停止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apachectl stop</span><br></pre></td></tr></table></figure></li><li><p>重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apachectl restart</span><br></pre></td></tr></table></figure><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><h3 id="MariaDB-MySQL"><a href="#MariaDB-MySQL" class="headerlink" title="MariaDB(MySQL)"></a>MariaDB(MySQL)</h3></li><li><p>MariaDB 是 MySQL 关系数据库管理系统的一个复刻，由社区开发，有商业支持，旨在继续保持在GNU GPL下开源。开发这个分支的原因之一是：甲骨文公司收购了 MySQL 后，有将 MySQL 闭源的潜在风险，因此社区采用分支的方式来避开这个风险。</p></li></ul><h2 id="安装-MariaDB"><a href="#安装-MariaDB" class="headerlink" title="安装 MariaDB"></a>安装 MariaDB</h2><ul><li><p>Termux 官方也封装了MariaDB，所以安全起来很方便：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install mariadb</span><br></pre></td></tr></table></figure></li><li><p>这里基本上会安装很顺利，但是早期用户可能出现安装失败的情况，如果安装失败的话，这个时候手动在配置目录下创建my.cnf.d文件夹即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd &#x2F;data&#x2F;data&#x2F;com.termux&#x2F;files&#x2F;usr&#x2F;etc&#x2F;</span><br><span class="line">$ mkdir my.cnf.d</span><br></pre></td></tr></table></figure><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3></li><li><p>早期的 Termux 安装完 MySQL是需要初始化数据库的，新版本在安装时候就已经初始化了数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_install_db</span><br></pre></td></tr></table></figure></li><li><p>2020年4月19日：今天安装的MySQL 发现已经存在 mysql.user 表了，无需初始化</p><h3 id="启动-MySQL-服务"><a href="#启动-MySQL-服务" class="headerlink" title="启动 MySQL 服务"></a>启动 MySQL 服务</h3></li><li><p>因为正常启动完成后，MySQL这个会话就一直存活，类似与debug调试一样，此时使用Ctrl + C -&gt; 中止当前进程也无济于事，体验式就一点都不优雅，所以这里国光使用Linux自带的nohup命令将其放到后台启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup mysqld &amp;</span><br></pre></td></tr></table></figure></li><li><p>图片上这个17115此时就是mysqld的进程PID号，我们使用如下命令验证一下是否正确：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep mysql</span><br></pre></td></tr></table></figure><h3 id="停止-MySQL-服务"><a href="#停止-MySQL-服务" class="headerlink" title="停止 MySQL 服务"></a>停止 MySQL 服务</h3></li><li><p>Termux 下没有好的办法退出 MySQL 服务，只能强制杀掉进程了，使用如下命令格式可以轻松杀掉进程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 PID</span><br></pre></td></tr></table></figure></li><li><p>当然每次查看进程的PID号，再杀掉进程有点繁琐了，实际上这一步可以直接这样操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 &#96;pgrep mysql&#96;</span><br></pre></td></tr></table></figure><h3 id="默认的两个用户"><a href="#默认的两个用户" class="headerlink" title="默认的两个用户"></a>默认的两个用户</h3></li><li><p>用户登录的前提是MySQL服务在后台运行，如果你按照上一小节操作把MySQL kill掉的话，请重新启动一下MySQL服务</p></li><li><p>新版本的 Termux 安装初始化数据库的时候包含两个高权限用户，一个是无法访问的 root 用户</p></li><li><p>另一个用户就是 Termux 的用户名，默认密码为空，我们来登录看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u $(whoami)</span><br><span class="line">select user();</span><br><span class="line">离开quit</span><br></pre></td></tr></table></figure><h3 id="修改-root-密码"><a href="#修改-root-密码" class="headerlink" title="修改 root 密码"></a>修改 root 密码</h3></li><li><p>老版本的 Termux 的直接使用mysql_secure_installation可以设置密码，但是新版本的安全策略变更了 我们在设置密码的时候回提示当前密码不正确，所以这条路行不通了。</p></li><li><p>这里我们只能使用MySQL的另一个用户名，即 Termux 用户名登录，然后来修改 root 的密码，使用如下命令修改 root 密码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 登录 Termux 用户</span><br><span class="line">mysql -u $(whoami)</span><br><span class="line"></span><br><span class="line"># 修改 root 密码的 SQL语句</span><br><span class="line">use mysql;</span><br><span class="line">set password for &#39;root&#39;@&#39;localhost&#39; &#x3D; password(&#39;你设置的密码&#39;);</span><br><span class="line"></span><br><span class="line"># 刷新权限 并退出</span><br><span class="line">flush privileges;</span><br><span class="line">quit;</span><br></pre></td></tr></table></figure><h3 id="root-用户登录"><a href="#root-用户登录" class="headerlink" title="root 用户登录"></a>root 用户登录</h3></li><li><p>修改完密码之后我们就可以美滋滋地使用 root 用户来登录了</p><figure class="highlight plain"><figcaption><span>-u root -p</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter password: xxxxx（这里输入你的密码)</span><br></pre></td></tr></table></figure><h3 id="远程登录-MySQL"><a href="#远程登录-MySQL" class="headerlink" title="远程登录 MySQL"></a>远程登录 MySQL</h3></li><li><p>使用 ip a 后查看 IP 地址后，尝试电脑端远程访问 Termux 的数据库:</p></li><li><p>发现默认是无法成功连接的，这个时候我们需要到数据库手动开启 root 用户的远程访问权限:</p></li><li><p>这里的 P@ssw0rd 是我的 root 密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all on *.* to root@&#39;%&#39; identified by &#39;P@ssw0rd&#39; with grant option;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2></li><li><p>Nginx 是一个高性能的 Web 和反向代理服务器，Nginx 用的熟悉的话，下面搭建各种网站也就轻而易举了。</p></li></ul><h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><p>Termux 安装 Nginx 也很简单，一条命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkg install nginx</span><br><span class="line">nginx -v</span><br></pre></td></tr></table></figure><h3 id="测试-Nginx"><a href="#测试-Nginx" class="headerlink" title="测试 Nginx"></a>测试 Nginx</h3><ul><li><p>测试检查 Nginx 的配置文件是否正常:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure><h3 id="启动-Nginx"><a href="#启动-Nginx" class="headerlink" title="启动 Nginx"></a>启动 Nginx</h3></li><li><p>早期版本的 Termux 需要在termux-chroot 环境下才可以成功启动 Nginx ，新版本的 Termux 可以直接启动，很是方便：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure></li><li><p>Termux 在 Nginx 上默认运行的端口号是 8080， 使用pgrep命令也可以查看 Nginx 进程相关的PID号。</p></li><li><p>然后手机本地直接访问<a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a> 查看 Nginx 是否正常启动</p><h3 id="重启-Nginx"><a href="#重启-Nginx" class="headerlink" title="重启 Nginx"></a>重启 Nginx</h3></li><li><p>一般当修改完 Nginx 相关的配置文件时，我们需要重启 Nginx，使用如下命令即可重启:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>###停止 Nginx</p></li><li><p>方法一 原生停止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure><p>或者</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s quit</span><br></pre></td></tr></table></figure><ul><li><p>quit 是一个优雅的关闭方式，Nginx在退出前完成已经接受的连接请求。Stop 是快速关闭，不管有没有正在处理的请求。</p></li><li><p>方法二 杀掉进程<br>只需三番钟，里造会干我一样，爱象节款游戏 扯远了，只需要1条命令，即可优雅的终止掉 Nginx 服务:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kill -9 &#96;pgrep nginx&#96;</span><br><span class="line"># 查询 nginx 进程相关的 PID 号</span><br><span class="line">pgrep nginx</span><br><span class="line"></span><br><span class="line"># 杀掉 查询出的 PID号进程</span><br><span class="line">kill -9 PID</span><br></pre></td></tr></table></figure><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2></li><li><p>Hexo 是一个用 Nodejs 编写的快速、简洁且高效的博客框架。Hexo 使用 Markdown 解析文章，在几秒内，即可利用靓丽的主题生成静态网页。另外大家看到国光我的博客就是使用 Hexo 搭建的哦。</p></li></ul><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>Hexo 是用 Nodejs 编写的，所以安装的话得使用 npm 命令来安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h3 id="Hexo-基本部署"><a href="#Hexo-基本部署" class="headerlink" title="Hexo 基本部署"></a>Hexo 基本部署</h3><p>我们建立一个目录，然后到这个目录下初始化Hexo 环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 手动创建一个目录</span><br><span class="line">mkdir hexo  </span><br><span class="line"></span><br><span class="line"># 进入目录下并初始化Hexo环境</span><br><span class="line">cd hexo  </span><br><span class="line">hexo init  </span><br><span class="line"></span><br><span class="line">#生成静态文件 启动Hexo</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><ul><li>然后就跑起来一个最基本的 Hexo 博客，关于 Hexo 博客的详细教程，建议搭建去参考Hexo官方文档，我这里重点在于 Termux 其他的不作过多的叙述.</li><li>使用浏览器访问: <a href="http://127.0.0.1:4000" target="_blank" rel="noopener">http://127.0.0.1:4000</a> 即可看到 Hexo 的效果图：</li></ul><h3 id="Hexo-部署到-Nginx"><a href="#Hexo-部署到-Nginx" class="headerlink" title="Hexo 部署到 Nginx"></a>Hexo 部署到 Nginx</h3><ul><li><p>Hexo 是纯静态博客，官方默认把 Hexo 搭建在 Github Pages 仅仅是把 Hexo 根目录的 public 文件夹即 Hexo 生成的纯 HTML 源码部署到上面而已。所以知道这样原理 我们就可以轻而易举地将 Hexo 部署到 Nginx 下面。</p></li><li><p>生成 HTML 纯静态源</p><h3 id="生成-HTML-纯静态源码"><a href="#生成-HTML-纯静态源码" class="headerlink" title="生成 HTML 纯静态源码"></a>生成 HTML 纯静态源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h3 id="拷贝源码搭到-Nginx"><a href="#拷贝源码搭到-Nginx" class="headerlink" title="拷贝源码搭到 Nginx"></a>拷贝源码搭到 Nginx</h3></li><li><p>现在我们只需要将 public 的文件夹里面的源码 全部拷贝到 Nginx 的网站根目录下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 在 nginx 根目录下新建 hexo 文件夹</span><br><span class="line">mkdir $PREFIX&#x2F;share&#x2F;nginx&#x2F;html&#x2F;hexo</span><br><span class="line"></span><br><span class="line"># 拷贝 源码到 nginx 下</span><br><span class="line">cp -rf public&#x2F;* $PREFIX&#x2F;share&#x2F;nginx&#x2F;html&#x2F;hexo</span><br></pre></td></tr></table></figure><h3 id="访问效果查看"><a href="#访问效果查看" class="headerlink" title="访问效果查看"></a>访问效果查看</h3></li><li><p>浏览器访问:<a href="http://127.0.0.1:8080/hexo/" target="_blank" rel="noopener">http://127.0.0.1:8080/hexo/</a> 即可看到效果</p></li><li><p>当然这里网站的CSS等样式没有加载出来，这个原因是 Hexo 对网站– 目录下部署并不友好 ，大概有如下解决方法：</p></li></ul><p>N- ginx vhosts 配置多域名，这个服务器上常用的操作，但是 Termux 里面实现难度较高<br>xo 的源码 直接拷贝到 Nginx 的根目录下，不用拷贝到 html/hexo 目录下了，然后直接访问 <a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a> 即可看到效果<br>国光这里就只是说一下这个思路，因为强迫症的我 不能忍受 Nginx 根目录的文件 乱七八糟 =，= 大家想尝试的话 按照我这个思路去尝试</p><h2 id="Termux-API"><a href="#Termux-API" class="headerlink" title="Termux:API"></a>Termux:API</h2><ul><li>Termux:API，可用于访问手机硬件实现更多的友情的功能。官方唯一一个免费的 API，良心啊</li></ul><h3 id="安装Termux-API"><a href="#安装Termux-API" class="headerlink" title="安装Termux:API"></a>安装Termux:API</h3><p>下载地址</p><ul><li>Termux:API Google Play 下载地址</li><li>Termux:API F-Droid 下载地址</li><li>请勿在Google Play 和 F-Droid 之间混合安装Termux 和 插件<h3 id="给-app-权限"><a href="#给-app-权限" class="headerlink" title="给 app 权限"></a>给 app 权限</h3></li><li>因为 Termux-api 可以直接操作手机底层，所以我们需要到手机的设置里面给 这个 APP 的权限全部开了，这样下面操作的时候就不会提示权限不允许的情况了。<h3 id="安装-Termux-api-软件包"><a href="#安装-Termux-api-软件包" class="headerlink" title="安装 Termux-api 软件包"></a>安装 Termux-api 软件包</h3></li><li>手机安装完 Termux-api 的APP后，Termux 终端里面必须安装对应的包后才可以与手机底层硬件进行交互。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install termux-api</span><br></pre></td></tr></table></figure><h3 id="获取设备信息相关"><a href="#获取设备信息相关" class="headerlink" title="获取设备信息相关"></a>获取设备信息相关</h3></li><li>获取电池信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">termux-battery-status</span><br></pre></td></tr></table></figure></li><li>参数无，返回信息是JSON格式。 可以看到电池的-健康状况-电量百分比-温度情况等<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;health&quot;: &quot;GOOD&quot;,</span><br><span class="line">    &quot;percentage&quot;: 100,</span><br><span class="line">      &quot;plugged&quot;: &quot;UNPLUGGED&quot;,</span><br><span class="line">        &quot;status&quot;: &quot;DISCHARGING&quot;,</span><br><span class="line">  &quot;temperature&quot;: 24.600000381469727</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="获取相机信息"><a href="#获取相机信息" class="headerlink" title="获取相机信息"></a>获取相机信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">termux-camera-info</span><br></pre></td></tr></table></figure></li><li>参数无，返回信息是JSON格式。</li></ul><h3 id="获取通讯录列表"><a href="#获取通讯录列表" class="headerlink" title="获取通讯录列表"></a>获取通讯录列表</h3><ul><li>参数无，返回信息是JSON格式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">termux-contact-list</span><br></pre></td></tr></table></figure><h3 id="查看红外载波频率"><a href="#查看红外载波频率" class="headerlink" title="查看红外载波频率"></a>查看红外载波频率</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">termux-infrared-frequencies</span><br></pre></td></tr></table></figure><h3 id="获取无线电信息"><a href="#获取无线电信息" class="headerlink" title="获取无线电信息"></a>获取无线电信息</h3>无参数，返回格式是JSON格式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">termux-telephony-cellinfo</span><br></pre></td></tr></table></figure><h3 id="查看手机运营商信息"><a href="#查看手机运营商信息" class="headerlink" title="查看手机运营商信息"></a>查看手机运营商信息</h3></li><li>无参数，返回格式是JSON格式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 获取 USB 设备信息</span><br></pre></td></tr></table></figure>termux-usb [-l | [-r] [-e 命令] 设备]<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>l               列出可用设备</li><li>r               如果尚未授予权限，则显示 权限请求对话框</li><li>e command       执行指定的命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- Android Termux 下要读取 USB 内容或者 U盘的时候，还需要安装如下依赖包</span><br></pre></td></tr></table></figure>pkg install termux-api libusb clang -y<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 有些包我们上面已经安装过了。</span><br><span class="line"></span><br><span class="line">- 下面来实际演示一下这个 API 的使用:</span><br><span class="line"></span><br><span class="line">- 查看 次数 Android 的 USB 设备信息:</span><br></pre></td></tr></table></figure>$ termux-usb -l<br>[<br> “/dev/bus/usb/001/002”<br> ]</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 可以看到我这个 512GB 的 M.2 SSD 已经显示在列表中了 (装作不经意间说出来的样子，类似于朱一旦不经意间露出自己的劳力士一样 2333)</span><br><span class="line"></span><br><span class="line">请求访问权限:</span><br></pre></td></tr></table></figure><p>termux-usb -r /dev/bus/usb/001/002</p><p>Access granted.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 下面级可以尝试写代码去访问这个 USB 设备内容了:</span><br><span class="line"></span><br><span class="line">- usbtest.c</span><br></pre></td></tr></table></figure><p>#include &lt;stdio.h&gt; #include &lt;assert.h&gt; #include &lt;libusb-1.0/libusb.h&gt; int main(int argc, char **argv) { libusb_context *context; libusb_device_handle *handle; libusb_device *device; struct libusb_device_descriptor desc; unsigned char buffer[256]; int fd; assert((argc &gt; 1) &amp;&amp; (sscanf(argv[1], “%d”, &amp;fd) == 1)); assert(!libusb_init(&amp;context)); assert(!libusb_wrap_sys_device(context, (intptr_t) fd, &amp;handle)); device = libusb_get_device(handle); assert(!libusb_get_device_descriptor(device, &amp;desc)); printf(“Vendor ID: %04x\n”, desc.idVendor); printf(“Product ID: %04x\n”, desc.idProduct); assert(libusb_get_string_descriptor_ascii(handle, desc.iManufacturer, buffer, 256) &gt;= 0); printf(“Manufacturer: %s\n”, buffer); assert(libusb_get_string_descriptor_ascii(handle, desc.iProduct, buffer, 256) &gt;= 0); printf(“Product: %s\n”, buffer); assert(libusb_get_string_descriptor_ascii(handle, desc.iSerialNumber, buffer, 256) &gt;= 0); printf(“Serial No: %s\n”, buffer); libusb_exit(context); }</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 代码内容主要是 显示有关USB设备的一些基本信息，参数就是我们的设备信息。让我们编译一下：</span><br></pre></td></tr></table></figure><p>gcc usbtest.c -lusb-1.0 -o usbtest</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 编译完成后会生成可执行的文件 usbtest ，接下来通过 这个 API 来执行这个文件:</span><br></pre></td></tr></table></figure><p>termux-usb -e ./usbtest /dev/bus/usb/001/002</p><p>Vendor ID: 152d<br>Product ID: 0576<br>Manufacturer: Hikvision<br>Product: Hikvision External Disk<br>Serial No: 0123456789ABCDEF</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 获取当前WiFi连接信息</span><br></pre></td></tr></table></figure><p>termux-wifi-connectioninfo<br>{<br>  “bssid”: “xx:xx:00:00:00:00”,<br>    “frequency_mhz”: 5785,<br>      “ip”: “192.168.31.124”,<br>        “link_speed_mbps”: 130,<br>      “mac_address”: “xx:xx:00:00:00:00”,<br>        “network_id”: -1,<br>          “rssi”: -69,<br>            “ssid”: “<unknown ssid>“,<br>          “ssid_hidden”: true,<br>            “supplicant_state”: “COMPLETED”<br>            }</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### 获取 WiFi 扫描信息</span><br><span class="line">- 在 Android 10 上没有成功执行过这个 API， 不过以前的一加5 是可以执行的下面的图 是以前的老图:</span><br></pre></td></tr></table></figure><p>termux-wifi-scaninfo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 拍摄照片</span><br></pre></td></tr></table></figure><p>termux-camera-photo [-c camera-id] output-file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- camera-id: 相机的 id，默认是 0， 相机 id 可以通过隔壁的命令来获取</span><br><span class="line"></span><br><span class="line">- 下面的命令表示 使用 相机id 为 0 即后置的相机来拍摄(id 1 为前置相机)，保存的文件在当前路径下 名字叫 guoguang.jpg</span><br></pre></td></tr></table></figure><p>termux-camera-photo -c 0 guoguang.jpg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 看了下后置拍摄出来的照片，有点看不下去。前置相机效果还不错，可能是因为现在手机是多个摄像头的原因，Termux 的相机算法上面没有做到足够好的优化。</span><br><span class="line"></span><br><span class="line">### 获取与设置剪贴板</span><br><span class="line">- 查看当前剪贴板内容</span><br></pre></td></tr></table></figure><p>termux-clipboard-get</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 设置新的剪贴板内容</span><br></pre></td></tr></table></figure><p>termux-clipboard-set PHP是世界上最好的语言</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### 调用系统下载器</span><br><span class="line">- 直接调用系统下载器，不返回任何值。而且国光我现在还没有搞清楚下载的文件到哪里去了</span><br></pre></td></tr></table></figure><p>termux-download [-d 描述] [-t 标题] 下载的目标地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>termux-download -d ‘Termux下载测试’ -t ‘QQ.apk’ ‘<a href="https://qd.myapp.com/myapp/qqteam/QQ_JS/qqlite_4.0.0.1025_537062065.apk&#39;" target="_blank" rel="noopener">https://qd.myapp.com/myapp/qqteam/QQ_JS/qqlite_4.0.0.1025_537062065.apk&#39;</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 调用指纹传感器</span><br><span class="line">- 该 API 仅适用于Android 6 及其以上版本，不接受任何参数，返回 JSON 格式。</span><br></pre></td></tr></table></figure><p>termux-fingerprint</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## 安装 Termux:Boot</span><br><span class="line">- 使用方法</span><br><span class="line">- 安装完成启动这个应用程序后，创建~&#x2F;.termux&#x2F;boot&#x2F;目录，将需要开机自启的脚本放在这个目录下面，如果有多个文件的话，将他们按照排序顺序执行，如果要确保设备进入睡眠状态，建议脚本前面先运行termux-wake-lock 命令。</span><br><span class="line">- 下面是一个开机自启 sshd 服务的的脚本，文件的完整路径为: ~&#x2F;.termux&#x2F;boot&#x2F;start-sshd 内容如下:</span><br></pre></td></tr></table></figure><p>#!/data/data/com.termux/files/usr/bin/sh<br>termux-wake-lock<br>sshd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">## Termux:Float</span><br><span class="line">- 可以将 Termux 悬浮窗形式显示，看上去比较酷炫</span><br><span class="line">## Termux:Widget</span><br><span class="line">- 提供了 Andorid 的 Termux 小部件。</span><br><span class="line"></span><br><span class="line">## 无聊专区</span><br><span class="line">- 一些无聊有趣的知识，如果你是一个正经讲究人，可以跳过这个版块以节约你的阅读时间。</span><br><span class="line"></span><br><span class="line">### cmatrix</span><br><span class="line">- 《黑客帝国》的代码雨视觉特效。</span><br></pre></td></tr></table></figure><p>pkg install cmatrix<br>cmatrix</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### cowsay</span><br><span class="line">- cowsay 命令是一个有趣的命令，它会用 ASCII 字符描绘牛，羊和许多其他动物，还可以附带上个自定义文本，很巧的是 Termux 也封装了这个工具。</span><br></pre></td></tr></table></figure><p>pkg intall cowsay<br>cowsay -f 动物 内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>$ cowsay -l list</p><p>Cow files in /data/data/com.termux/files/usr/share/cows:<br>beavis.zen bong bud-frogs bunny cheese cower daemon default dragon<br>dragon-and-cow elephant elephant-in-snake eyes flaming-sheep ghostbusters<br>head-in hellokitty kiss kitty koala kosh luke-koala meow milk moofasa moose<br>mutilated ren sheep skeleton stegosaurus stimpy three-eyes turkey turtle<br>tux vader vader-koala www</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 演示</span><br></pre></td></tr></table></figure><p>cowsay -f eyes ‘法外狂徒张三’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### figlet</span><br><span class="line">- FIGlet 是创建一个简单的命令行实用程序，用于创建 ASCII logo。</span><br></pre></td></tr></table></figure><p>pkg install figlet<br>figlet -f 字体’文本内容’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 内置</span><br></pre></td></tr></table></figure><p>ls $PREFIX/share/figlet 646-ca.flc 646-jp.flc 8859-7.flc circle.tlf mini.flf smbraille.tlf 646-ca2.flc 646-kr.flc 8859-8.flc digital.flf mnemonic.flf smmono12.tlf 646-cn.flc 646-no.flc 8859-9.flc emboss.tlf mono12.tlf smmono9.tlf 646-cu.flc 646-no2.flc ascii12.tlf emboss2.tlf mono9.tlf smscript.flf 646-de.flc 646-pt.flc ascii9.tlf frango.flc moscow.flc smshadow.flf 646-dk.flc 646-pt2.flc banner.flf future.tlf pagga.tlf smslant.flf 646-es.flc 646-se.flc big.flf hz.flc script.flf standard.flf 646-es2.flc 646-se2.flc bigascii12.tlf ilhebrew.flc shadow.flf term.flf 646-fr.flc 646-yu.flc bigascii9.tlf ivrit.flf slant.flf upper.flc 646-gb.flc 8859-2.flc bigmono12.tlf jis0201.flc small.flf ushebrew.flc 646-hu.flc 8859-3.flc bigmono9.tlf koi8r.flc smascii12.tlf uskata.flc 646-irv.flc 8859-4.flc block.flf lean.flf smascii9.tlf utf8.flc 646-it.flc 8859-5.flc bubble.flf letter.tlf smblock.tlf wideterm.tlf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-演示</span><br></pre></td></tr></table></figure><p>figlet -f future ‘<a href="http://www.sqlsec.com&#39;" target="_blank" rel="noopener">www.sqlsec.com&#39;</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### hollywood</span><br><span class="line">- 在 Linux 终端中伪造好莱坞黑客屏幕，假装自己是一名黑客。</span><br></pre></td></tr></table></figure><p>pkg install hollywood<br>hollywood</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">### neofetch</span><br><span class="line">- Neofetch 是一个简单但有用的命令行系统信息工具。它会收集有关系统软硬件的信息，并在终端中显示结果。</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;pkg install neofetch</span><br><span class="line">neofetch</span><br></pre></td></tr></table></figure><h3 id="nyancat"><a href="#nyancat" class="headerlink" title="nyancat"></a>nyancat</h3><ul><li>彩虹貓（英语：Nyan Cat）是在2011年4月上传在Youtube 的视频，并且迅速爆红于网络，並在2011年YouTube浏览量最高的视频中排名第五，B站这个小猫也很多，主要是BGM比较魔性，感兴趣的朋友可以自己去搜索看看。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkg install nyancat</span><br><span class="line">nyancat</span><br></pre></td></tr></table></figure><ul><li>使用 Ctrl + C 快捷键退出魔性循环</li></ul><h3 id="screenfetch"><a href="#screenfetch" class="headerlink" title="screenfetch"></a>screenfetch</h3><ul><li>Screenfetch 是一个适用于 Linux 的小工具，用于显示系统信息及ASCII化的Linux发行版图标。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkg install screenfetch</span><br><span class="line">screenfetch</span><br></pre></td></tr></table></figure></li></ul><h2 id="文章总结"><a href="#文章总结" class="headerlink" title="文章总结"></a>文章总结</h2><ul><li>相对来说 国外的Termux DIY的氛围比国内好很多，Youtube上的视频都有很高的播放量。当然国内也有这么一批执着于Termux的玩家，当初写完这篇文章的时候，相对来说还比较小众的，写这篇文章只想让更多的人认识到 Termux 的生产力，使用 Termux 来做一些很 cool 的事情。 期待有更多Termux的优秀文章出现~</li></ul><p>来源: 国光<br>文章链接: <a href="https://www.sqlsec.com/2018/05/termux.html" target="_blank" rel="noopener">https://www.sqlsec.com/2018/05/termux.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> Termux </category>
          
          <category> 手机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Termux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础】基础命令笔记</title>
      <link href="/posts/1fb50447.html"/>
      <url>/posts/1fb50447.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>学习Linux基础命令<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ls -a(查看隐藏文件)</span><br><span class="line">ls -l (详情)</span><br><span class="line">ls -d指定目录详情</span><br><span class="line">ls -h查看多少kb</span><br><span class="line">ls -i查看ID节点</span><br><span class="line">mkdir -p 创建不存在目录</span><br><span class="line">pwd 查看目录</span><br><span class="line">cd  ..</span><br><span class="line">rmdir 删除空目录</span><br><span class="line">cp &#x2F;etc&#x2F;xattr.conf &#x2F;tmp 复制(-r复制目录；-p覆盖文件保持属性，时间)</span><br><span class="line">cp -r &#x2F;tmp&#x2F;test &#x2F;root </span><br><span class="line">cp -r &#x2F;tmp&#x2F;test &#x2F;root&#x2F;saofu18+ (改名)</span><br><span class="line">cat  -n &#x2F;etc显示内容,-n行号</span><br><span class="line">more &#x2F;etc 分页 q退出 回车换行，空格，f翻页</span><br><span class="line">less 浏览     &#x2F;关键词 搜索 可以向上翻页 </span><br><span class="line">head -n 1  sysctl.conf  看前几行  -n几行</span><br><span class="line">tail后几行       -f  动态查看内容更新  没有-n默认查看10行</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PicPlus+手机📱】之手机📱图床🛏️</title>
      <link href="/posts/823065e4.html"/>
      <url>/posts/823065e4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>咕咚 Markdown 助手，这是一个用来上传手机图片到图床的 Android 软件，后来还支持了 GitHub 图床，不过对于普通用户，配置 GitHub 图床稍微有点麻烦，所以就有了这个教程。</p></li><li><p>另外一些人可能对 图床 跟 GitHub 这两个概念比较陌生，所以为了更好的这里也简单介绍一下，如果对它们已经了解，可以选择跳过下面的两部分，直接阅读正文部分。</p><h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3></li><li><p>图床是用来在网络上存储图片的服务。可能有点抽象，这里先说说图片，图片是我们上网时除文字以外最常看到的东西，关于图片，如果通过存储形式区分，可以把图片分为：</p></li><li><p>本地图片</p></li><li><p>网络图片</p></li><li><p>本地图片很容易理解，比如我们用手机拍的照片，这些照片拍好后，它们会存储在手机的存储卡上，只有自己可以操作，你可以对它进行编辑、删除等任何操作，但是除手机主人之外的所有人都不能访问，因为它们在你的手机存储卡上。<br><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="https://cdn.jsdelivr.net/gh/foxscallion11/source/imgs/Screenshot_20200725_211606.jpg" alt=""></p><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3></li><li><p>这是一个国外公司开发的网站，这个网站主要为程序员提供了可以共享代码、文件的服务，比如你开发了一个程序，现在为了让更多人参与这个项目，一起开发，一共贡献 idea，就可以把代码上传到上面，GitHub 提供了友好的协作机制，然后大家就可以共同提交代码，共同维护项目，不少公司或者个人都选择用这样的方式去开发项目，这也是开源的力量。</p></li><li><p>上面说到的 GitHub 可以提供文件存储服务，所以它一定也支持图片存储，而且只要创建仓库时，仓库的访问属性是公开的，那么存储在这个仓库里的图片就可以为互联网上的所有人访问到。</p></li><li><p>所以 GitHub 也就可以作为图床服务，而且 GitHub 可以免费使用（有付费版），存储空间也没什么限制，很好用。</p><h2 id="配置-Github-图床"><a href="#配置-Github-图床" class="headerlink" title="配置 Github 图床"></a>配置 Github 图床</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3></li><li><p>在配置之前，首先得有一个 GitHub 账号，这是必须的，你可以打开 GitHub 官网先去完成账号注册。</p></li><li><p>有账号后，需要创建一个 github 仓库用来存储图片，如果你已经有仓库了，也可以直接复用，不过如果打算长期用 GitHub 做图床，还是建议建一个单独的图片仓库来存储图片，这样更容易管理。</p></li><li><p>创建仓库</p></li><li><p>点击 GitHub 页面右上角的加号按钮，可以选择创建仓库，如下图所示<br><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="https://cdn.jsdelivr.net/gh/foxscallion11/source/imgs/1595683154860.jpeg" alt=""></p></li><li><p>点击 New Reposity 后，接下来需要填写仓库的基本信息，这里只需要填写仓库的名称即可（记得用英文，比如 MyPic、Picture 之类的），其他的信息默认就好，不用填也不用选，然后直接点击最底下绿色的创建按钮即可。</p><h3 id="获取-token"><a href="#获取-token" class="headerlink" title="获取 token"></a>获取 token</h3></li><li><p>接下来需要为在自己 GitHub 账号下创建一个 token，这个 token 将用来让 app 帮你上传图床，它是软件可以上传图片到 GitHub 的通行证。<br><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="https://cdn.jsdelivr.net/gh/foxscallion11/source/imgs/1595683230496.jpeg" alt=""></p></li><li><p>点击按钮后会进入创建 token 的页面，这个页面只需要随便输入一个 token 名称即可，比如 pic 等，记得用英文，然后勾选下面的 repo 框就可以了，其余不用选，然后点击最下方的绿色按钮就可以生成 token 了。</p></li><li><p>在咕咚 Markdown 助手中配置 GitHub<br>软件中的配置页面在设置 -&gt; 图床选择 页面，然后点击 GitHub 一项即可配置</p></li><li><p>如上图所示，配置 GitHub 图片需要依次填入</p></li></ul><p>token （上面步骤三生成的 token）<br>github 用户名（注意是用户名，不是昵称）<br>仓库名称（上面创建的仓库名称）<br>存储路径<br>可以不填，这样图片会存储在仓库根目录，如果想要存储在子目录，可以先在 GitHub 创建子目录，然后在这里输入子目录路径，建议默认存在根目录就行</p><ul><li><p>这样就配置 OK 了，点击确定按钮，返回应用首页就可以尝试用刚配置的 GitHub 图床上传图片了。</p></li><li><p><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="https://cdn.jsdelivr.net/gh/foxscallion11/source/imgs/1595683445001.jpeg" alt=""></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2></li><li><p>这个软件的开发，目前支持 GitHub 图床、搜狗图床以及牛图图床，后续也会逐步支持七牛、腾讯云以及码云等其他主流图床。</p></li><li><p>另外除了在软件内上传图片，还支持在相册中以及任何支持系统分享的地方，通过系统分享上传图片，这样你就可以在浏览相册、系统截图或者其他文件分享时，找到咕咚 Markdown 助手的传图入口，然后进行上传</p><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">公众号：咕咚同学</span><br><span class="line">博客：咕咚的个人博客</span><br><span class="line">微博：大侠咕咚</span><br><span class="line">酷安：咕咚</span><br></pre></td></tr></table></figure></li></ul><body oncontextmenu="return false" onselectstart="return false" oncopy = "return false">]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 图床 </category>
          
          <category> PicPlus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo+双部署】之Coding与Github双线自动部署</title>
      <link href="/posts/6ba59fd.html"/>
      <url>/posts/6ba59fd.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>只需要用 git push 一推送，自动把博客部署到了GitHub 和Coding</p><p>背景<br>在玩 Hexo 博客的时候，每次提交写文章，发文章都要在本地先写完，在编译在发布。步骤可谓是极其繁琐，要没个耐心怕早早就弃坑了。幸好 GitHub 有一个能实现自动化的功能—— GitHub Action 。于是乎就有了下文—&gt;</p><body oncontextmenu="return false" onselectstart="return false" oncopy = "return false">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo-Coding】之coding与GitHub双向自动部署</title>
      <link href="/posts/403d8ced.html"/>
      <url>/posts/403d8ced.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>注： 著作权归作者所有啦。<br>商业转载请联系作者获得授权，非商业转载请注明出处。<br>原作者：foxscallion 本文没有授权给任何组织、企业和个人转载，未经作者允许禁止转载！ </p><footer><strong>Seth Godin</strong></footer></blockquote><h3 id="coding-介绍"><a href="#coding-介绍" class="headerlink" title="coding 介绍"></a>coding 介绍</h3><ul><li>在 CODING 您可以实现代码不落地完成整个项目的开发工作，完善的云端开发环境，让您打开浏览器即可开始编写代码。高可用代码仓库支持 Git/SVN 版本控制，可以进行分支粒度管理、建立代码评审机制</li><li>项目完成开发进入测试阶段，CODING 为您提供井然有序的测试协同工具，从编写测试用例、规划测试计划、自动化完成测试，到记录测试结果、产出测试报告并跟踪每一个缺陷，完美衔接开发、测试、产品之间的协同。</li><li>持续集成、持续部署、制品库功能为项目的持续交付提供完整的工具服务，支持所有主流语言以及多种目标环境，和代码仓库紧密关联，产出构建可视化报告。释放研发人力，提高生产效率。</li><li>Coding 是一个面向开发者的云端开发平台 [1]  ，目前提供代码托管，运行空间，质量控制，项目管理等功能。此外，还提供社会化协作功能，包含了社交元素，方便开发者进行技术讨论和协作<h3 id="coding注册"><a href="#coding注册" class="headerlink" title="coding注册"></a>coding注册</h3></li><li>链接<a><a href="https://coding.net/" target="_blank" rel="noopener">https://coding.net/</a></a><h3 id="coding使用"><a href="#coding使用" class="headerlink" title="coding使用"></a>coding使用</h3></li><li>使用你刚刚注册的账号登入</li><li>创建代码仓库</li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200723/140911053.png" alt="mark"></li><li>创建项目，选择代码托管</li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200723/135750750.png" alt="mark"></li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200723/135854328.png" alt="mark"></li><li>加入项目，点击左下角，项目设置-》项目成员-》功能开关，把持续部署，持续集成打开</li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200723/140234452.png" alt="mark"></li><li>点击持续集成-》构建计划</li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200723/140340068.png" alt="mark"></li><li>在最下面选择自定义模板</li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200723/140447591.png" alt="mark"></li><li>名称自己随便取一个，我的叫test</li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200723/141002457.png" alt="mark"></li><li>点击流程配置-》文本编辑-保存<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> pipeline &#123;</span><br><span class="line">  agent any</span><br><span class="line">  stages &#123;</span><br><span class="line">    stage(&#39;克隆项目&#39;) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        sh &#39;git clone https:&#x2F;&#x2F;Github用户名:密码@github.com&#x2F;用户名&#x2F;仓库.git .&#39;</span><br><span class="line">        sh &#39;ls -a&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#39;安装依赖&#39;) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        sh &#39;ls -a&#39;</span><br><span class="line">        sh &#39;npm install -g hexo-cli&#39;</span><br><span class="line">        sh &#39;npm install hexo --save&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#39;构建发布&#39;) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        sh &#39;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>复制coding里的hexo仓库地址</li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200723/141604417.png" alt="mark"></li><li>复制到你的hexo项目的_config.yml</li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200723/145743832.png" alt="mark"></li><li>部署公钥-&gt;新建公钥</li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200723/141840024.png" alt="mark"></li><li>你的邮箱公钥在c：/用户/用户名/.ssh/id_rsa.pub<h2 id="回到hexo项目"><a href="#回到hexo项目" class="headerlink" title="回到hexo项目"></a>回到hexo项目</h2></li><li>hexo clean，hexo g， hexo deploy</li><li>提交到coding<h2 id="回到coding"><a href="#回到coding" class="headerlink" title="回到coding"></a>回到coding</h2></li><li>coding帮你自动部署了</li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200723/142353552.png" alt="mark"><h2 id="创建静态网站"><a href="#创建静态网站" class="headerlink" title="创建静态网站"></a>创建静态网站</h2></li><li>点击持续集成-》静态网站</li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200723/142511409.png" alt="mark"></li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200723/142606980.png" alt="mark"></li><li>点击立刻部署</li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200723/142658332.png" alt="mark"></li><li>现在就可以访问了</li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200723/142721935.png" alt="mark"></li><li><div class="tip qq"><p>创作不易，如需转发请附上链接</p><p></p></div><body oncontextmenu="return false" onselectstart="return false" oncopy = "return false"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 部署 </category>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo+百度】之百度主动推送</title>
      <link href="/posts/6b5ec0b4.html"/>
      <url>/posts/6b5ec0b4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h2><ul><li><p>因为Github，禁止百度爬虫访问博客，导致博客无法被百度收录。多亏百度提供了主动提交的接口，这才有了个补救的方法。除此之外， 使用主动推送还会达到如下功效： </p></li><li><p>及时发现：可以缩短百度爬虫发现您站点新链接的时间，使新发布的页面可以在第一时间被百度收录 </p></li><li><p>保护原创：对于网站的最新原创内容，使用主动推送功能可以快速通知到百度，使内容可以在转发之前被百度发现</p></li></ul><p>##安装插件</p><ul><li><p>在Hexo根目录下，安装本插件 </p><hr><p>npm install hexo-baidu-url-submit –save</p><hr></li><li><p><strong>请注意， 本插件的配置文件中包含秘钥， 请把您的Hexo博客源文件托管到私有仓库里。</strong> </p></li><li><p>或者不要把Hexo文章里面涉及到你的项目公共仓库，建议库托管vercel，自动生成域名GitHub不再是用户名.github.io</p></li></ul><h2 id="配置-config-yml文件"><a href="#配置-config-yml文件" class="headerlink" title="配置_config.yml文件"></a>配置_config.yml文件</h2><ul><li>同样在根目录下，把以下内容配置到<code>_config.yml</code>文件中: </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">baidu_url_submit:</span><br><span class="line">  count: 3 ## 比如3，代表提交最新的三个链接</span><br><span class="line">  host: guoyanjun.top ## 在百度站长平台中注册的域名</span><br><span class="line">  token: your_token ## 请注意这是您的秘钥， 请不要发布在公众仓库里!</span><br><span class="line">  path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里</span><br></pre></td></tr></table></figure><h2 id="检查url"><a href="#检查url" class="headerlink" title="检查url"></a>检查url</h2><ul><li><p>其次，记得查看<code>_config.yml</code>文件中url的值， 必须包含是百度站长平台注册的域名（一般有www）， 比如:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># URL</span></span><br><span class="line">url: http:<span class="comment">//guoyanjun.top</span></span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br></pre></td></tr></table></figure></li><li><p>最后，加入新的deployer: </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- <span class="keyword">type</span>: git</span><br><span class="line">  repo:</span><br><span class="line">    coding: https:<span class="comment">//用户名:密码@git.coding.net/TinyJay/blog.git,master</span></span><br><span class="line">- <span class="keyword">type</span>: baidu_url_submitter</span><br></pre></td></tr></table></figure></li><li><p>执行hexo deploy的时候，新的链接就会被推送了。 </p></li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>新链接的产生，<code>hexo generate</code>会产生一个文本文件，里面包含最新的链接<br> 新链接的提交，<code>hexo deploy</code>会从上述文件中读取链接，提交至百度搜索引擎。<br> 链接参考：<a href="https://link.jianshu.com?t=http://guoyanjun.top/" target="_blank" rel="noopener">http://guoyanjun.top/</a></li><li>感谢作者：<a href="https://link.jianshu.com/?t=https://github.com/huiwang/hexo-baidu-url-submit" target="_blank" rel="noopener">https://github.com/huiwang/hexo-baidu-url-submit</a> </li></ul><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200722/235859170.png" alt="mark"></p><ul><li>出现这个代表成功了</li><li>remain表示今日可推送数</li><li>success表示推送成功一个</li></ul>]]></content>
      
      
      <categories>
          
          <category> 推送 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo+Vercel部署】比GithubPage更强大的静态站自动部署托管平台</title>
      <link href="/posts/2c4e5608.html"/>
      <url>/posts/2c4e5608.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言！"><a href="#前言！" class="headerlink" title="前言！"></a>前言！</h2><blockquote><p>注： 著作权归作者所有。<br>商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>原文地址：  <a href="https://foxlemon.vercel.app/posts/2c4e5608.html" target="_blank" rel="noopener">https://foxlemon.vercel.app/posts/2c4e5608.html</a> 原作者：foxscallion 本文没有授权给任何组织、企业和个人转载，未经作者允许禁止转载！ </p><footer><strong>Seth Godin</strong></footer></blockquote> <div class='tip font5 fas fa-atom'><p>因为域名的备案申请还没有通过，想着能够通过免费的CDN来加速网站，同时又能够满足免费的域名，偶尔在别人博客网站上看到了<p></div>![mark](http://qdraqx6e2.bkt.clouddn.com/blog/20200722/020224337.png)<div class="tip wtgo font5 fas fa-bolt"><p>于是我就通过百度发现了这个vercel是真的真的好用，全自动部署，只要你提交GitHub代码到vercel就可以了，几天前我就想注册个vercel，只是一直苦于无法注册，如图</p><p></p></div>![mark](http://qdraqx6e2.bkt.clouddn.com/blog/20200722/020543399.png)<div class="tip qq font5 fab fa-qq"><p>于是我用谷歌空间注册了foxscallion@gmail.com账号，然后重新注册GitHub，通过这个样子，终于vercel成功登入了。</p><p></p></div>## 通过邮箱重新注册个GitHub<ul><li>GitHub重新注册完，添加token密钥</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200722/021132801.png" alt="mark"></p><ul><li>将这些框框全部✔，然后确定</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200722/021215949.png" alt="mark"></p><ul><li><p>然后新建仓库（怎么建就不说了）</p></li><li><p>把密钥token添加到博客根目录_config.yml的repo</p></li></ul><ul><li><div class="tip qq font5 fab fa-qq"><p>这里先复制密钥（密钥☞存在一次）先复制出来</p><p></p></div></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200722/022233262.png" alt="mark"></p><ul><li><div class="tip qq font5 fab fa-qq"><p>注意https://密钥@仓库地址</p><p></p></div></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200722/022049398.png" alt="mark"></p><ul><li>复制你的仓库git地址</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200722/021348689.png" alt="mark"></p><ul><li>修改博客根目录的_config.yml，将你的地址换过来</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200722/021525881.png" alt="mark"></p><p><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200722/021608624.png" alt="mark"></p><ul><li>然后hexo clean ，hexo g ，hexo deploy，提交到你刚刚建的GitHub仓库</li></ul><h2 id="注册你的vercel"><a href="#注册你的vercel" class="headerlink" title="注册你的vercel"></a>注册你的vercel</h2><ul><li>访问<a href="https://link.zhihu.com/?target=https%3A//vercel.com/">Vercel</a>官网，根据提示注册账号。个人用户可以免费使用。</li></ul><ul><li><div class="tip qq font5 fab fa-qq"><p>我的是用谷歌的邮箱注册GitHub，然后通过GitHub绑定vercel的</p><p></p></div></li><li><p>我的是用谷歌的邮箱注册GitHub，然后通过GitHub绑定vercel的</p></li><li><p><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200722/022926816.png" alt="mark"></p></li><li><p><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200722/022946779.png" alt="mark"></p></li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3><ul><li>点击<code>Import Project</code> -&gt; <code>Import Git Repository</code>，输入git仓库地址，vercel与Github基本上是无缝衔接，绑定过程非常轻松。 </li></ul><ul><li>点击文件<img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200722/023043263.png" alt="mark"></li><li>添加项目<img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200722/023116826.png" alt="mark"></li><li>输入仓库地址</li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200722/023129832.png" alt="mark"></li></ul><ul><li><h3 id="绑定完成后是项目配置。Vercel会自动识别开发框架，这里可以自定义编译代码和输出文件夹，你可以在编译代码中添加自己的逻辑；使用内置框架一般不要修改输出文件夹。"><a href="#绑定完成后是项目配置。Vercel会自动识别开发框架，这里可以自定义编译代码和输出文件夹，你可以在编译代码中添加自己的逻辑；使用内置框架一般不要修改输出文件夹。" class="headerlink" title="绑定完成后是项目配置。Vercel会自动识别开发框架，这里可以自定义编译代码和输出文件夹，你可以在编译代码中添加自己的逻辑；使用内置框架一般不要修改输出文件夹。"></a>绑定完成后是项目配置。Vercel会自动识别开发框架，这里可以自定义编译代码和输出文件夹，你可以在编译代码中添加自己的逻辑；<strong>使用内置框架一般不要修改输出文件夹</strong>。</h3></li><li><p>配置完成后点击<code>Deploy</code>，耐心等待即可</p></li><li><p>等待一会vercel就部署成功了</p></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200722/023312020.png" alt="mark"></p><ul><li>点击visit通过浏览器访问</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200722/023411471.png" alt="mark"></p><body oncontextmenu="return false" onselectstart="return false" oncopy = "return false">]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 部署 </category>
          
          <category> Vercel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vercel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo搭建集合】之快速免费搭建个人博客</title>
      <link href="/posts/14d47894.html"/>
      <url>/posts/14d47894.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="noopener">Welcome to Island Marketing</a></cite></footer></blockquote><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io" target="_blank" rel="noopener">http://devdocs.io</a></p><footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="noopener">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote><figure class="highlight plain"><figcaption><span>[title] [] [url] [link text] [additional options]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code snippet</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</span><br></pre></td></tr></table></figure><p>&lt;% for (var link in site.data.menu) { %&gt;<br>  <a href="<%= site.data.menu[link] %>"> &lt;%= link %&gt; </a><br>&lt;% } %&gt;</p><ol><li>你好！</li><li>看什么看</li><li>我很帅吗！！！</li></ol>使用方法一：<div class='tip' ><p>默认情况<p></div><div class='tip success'><p>success<p></div><div class='tip error'><p>error<p></div><div class='tip warning'><p>warning<p></div>使用方法二：<div class='tip font5 fas fa-atom'><p>自定义font5图标<p></div><div class="tip wtgo font5 fas fa-bolt"><p>魔改标签1</p><p></p></div><div class="tip ban font5 fas fa-ban"><p>魔改标签2</p><p></p></div><div class="tip home font5 fas fa-home"><p>魔改标签3</p><p></p></div><div class="tip important font5 fas fa-home"><p>魔改标签4</p><p></p></div><div class="tip ref font5 fas fa-sync"><p>魔改标签5</p><p></p></div><div class="tip ffa font5 fas fa-cogs"><p>魔改标签6</p><p></p></div><div class="tip key font5 fas fa-key"><p>魔改标签7</p><p></p></div><div class="tip socd font5 fas fa-bell"><p>魔改标签8</p><p></p></div><div class="tip qq font5 fab fa-qq"><p></p><p></p></div>使用方法三：<div class="tip wtgo"><p>文字</p><p></p></div><div class="tip ban"><p>文字</p><p></p></div><div class="tip home"><p>文字</p><p></p></div><div class="tip important"><p>魔改标签4</p><p></p></div><div class="tip ref"><p>魔改标签5</p><p></p></div><div class="tip ffa"><p>魔改标签6</p><p></p></div><div class="tip key"><p>魔改标签7</p><p></p></div><div class="tip socd"><p>魔改标签8</p><p></p></div><div class="tip qq"><p>魔改标签9</p><p></p></div>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> GitHub </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【每日一更】之七牛云图床神器</title>
      <link href="/posts/b9d82c4d.html"/>
      <url>/posts/b9d82c4d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>在使用MarkDown写博客的时候，图片的引用总是让人头疼的，那么就自己动手搭建属于自己的图床吧！<h2 id="注册七牛云账号并实名认证"><a href="#注册七牛云账号并实名认证" class="headerlink" title="注册七牛云账号并实名认证"></a>注册七牛云账号并实名认证</h2></li><li>七牛云的实名认证的用户，会有10G的空间，这对于一个个人图床是完全足够的了。</li><li>注册链接：<a href="https://portal.qiniu.com/create" target="_blank" rel="noopener">https://portal.qiniu.com/create</a></li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200720/153753268.png" alt="mark"><h2 id="实名认证成功以后，创建属于你的图床空间"><a href="#实名认证成功以后，创建属于你的图床空间" class="headerlink" title="实名认证成功以后，创建属于你的图床空间"></a>实名认证成功以后，创建属于你的图床空间</h2></li><li>首页最上方有实名认证</li><li>进入七牛云首页，点击进入控制台</li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200720/153852202.png" alt="mark"></li><li>创建资源，添加“对象存储”</li><li>【存储区域】：建议选择一个离你较近的CDN</li><li>【访问控制】：这里必须选择“公开空间”，因为设置为私有空间，图片的外链是无法访问的。</li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200720/154039710.png" alt="mark"></li><li>进入新创建的存储空间，在【内容管理】中上传你的图片文件，这样就可以使用这个图片的外链了。<h2 id="然后点击空间管理-文件管理-上传文件"><a href="#然后点击空间管理-文件管理-上传文件" class="headerlink" title="然后点击空间管理/文件管理/上传文件"></a>然后点击空间管理/文件管理/上传文件</h2></li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200720/154504037.png" alt="mark"></li><li>进入新创建的存储空间，在【内容管理】中上传你的图片文件，这样就可以使用这个图片的外链了。</li><li>返回文件管理，点详情，就有外链了。<h2 id="使用工具更加方便地上传图片资源"><a href="#使用工具更加方便地上传图片资源" class="headerlink" title="使用工具更加方便地上传图片资源"></a>使用工具更加方便地上传图片资源</h2></li><li>复制就能自动上传啦</li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200720/155218938.png" alt="mark"></li><li>AccessKey和SecretKey在如同</li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200720/155455308.png" alt="mark"></li><li>域名在这里</li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200720/155658438.png" alt="mark"></li><li><img src= "https://cdn.jsdelivr.net/gh/foxscallion11/source//imgaes/20200728143048.gif" data-src="http://qdraqx6e2.bkt.clouddn.com/blog/20200720/155257545.png" alt="mark"></li><li>拖进去就可以使用外链连接了，操作十分简便。</li></ul><body oncontextmenu="return false" onselectstart="return false" oncopy = "return false">]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 图床 </category>
          
          <category> 七牛云 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> images </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
